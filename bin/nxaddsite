#! /usr/bin/env bash

# Script Arguments
ARGA=("$@")
YES_DOMAIN=""
YES_FILE=""

_usage() {

# Print help
  cat <<- EOF

Description: Site Creation Tool For MWP and Magento.
Requires: Nocworx api-token
Usage: nxaddsite -d domain.com; nxaddsite -f file.txt

	Supported Options:

	-d|--domain   Create a site
	-f|--file     Create muliple domains from a file.
	-h|--help     Display This Message

EOF

}

_normalize_domain(){

  local sed_args

  sed_args=(-e 's/https?:\/\///' -e 's/\/.*//' -e 's,\.$,,')

  echo "$1" | sed -r "${sed_args[@]}" | tr '[:upper:]' '[:lower:]' # Strip URL of any extra slashes

}

_delete_api_token(){

  printf 'deleting client api-token...'

# delete token api request

  if ! curl -sX DELETE "${API_URL}${TOKEN_ENDPOINT}/${CLIENT_TOKEN_ID}" "${HEADERS[@]}" >/dev/null 2>&1; then
      printf "done\n"
      printf "Failed to delete TokenID: %s\n" "${CLIENT_TOKEN_ID}"
  else
      printf "done\n"
  fi

}

scan_site(){

  local temp_domain_endpoint temp_domain_response temp_domain

  HEADERS=("${HEADERS[@]:0:6}"); # Reset Headers to exclude -d

  temp_domain_endpoint="${ACC_ID}/v1/cloud-account?filter%5Bnickname%5D=${DOMAIN}"
  temp_domain_response=$(curl -s "${API_URL}${temp_domain_endpoint}" "${HEADERS[@]}");
  temp_domain=$(echo "${temp_domain_response}" | jq -r '.[].temp_domain'| tail -n1);
  if [[ -z "${temp_domain}" ]]; then
    printf "%s: unable to find temp domain\n" "${DOMAIN}"
  else
    printf "%s: %s\n" "${DOMAIN}" "${temp_domain}"
  fi
}

_create_site(){

  local legacy_api_url legacy_endpoint
  local -a client_headers
  DOMAIN="$1"

  legacy_api_url='https://portal.nexcess.net/' # set legacy endpoints

# create new header because we need clients api token for this call.
  client_headers=(
    -H "Authorization: Bearer ${CLIENT_TOKEN_VALUE}"
    -H "Content-Type: application/json"
    -H "Accept: application/json"
 )

  if [[ "${APP_ID}" == "11" ]]; then
    legacy_endpoint="cloud-account/${SITE_ID}"
    client_headers+=(
         -d "{\"nickname\": \"${DOMAIN}\", \"app_id\": \"${APP_ID}\", \"install_app\": \"off\", \"_action\": \"add-child-account\"}")
  else
    legacy_endpoint='cloud-account'
    client_headers+=(
         -d "{\"service_id\": \"${SERVICE_ID}\", \"install_app\": \"on\",\"nickname\": \"${DOMAIN}\"}")
  fi

  if ! curl -sLX POST "${legacy_api_url}${legacy_endpoint}" "${client_headers[@]}" >/dev/null 2>&1; then
      printf "Failed to create %s" "${DOMAIN}\n"
  else
      scan_site
  fi

}

_process_domains() {

# Read each domain from the file, normalize domain and create site
  printf "processing domains from %s\n" "${FILE}"
  while IFS= read -r DOMAIN; do
      NORMALIZED_DOMAIN=$(_normalize_domain "${DOMAIN}")
      _create_site "${NORMALIZED_DOMAIN}"
      sleep 5
  done < "${FILE}"

}

_create_api_token(){
  local  token_resp
  printf 'creating client api-token...'
  TOKEN_ENDPOINT="${ACC_ID}/v1/api-token" # Set Token Endpoint

# Add additional elements to header array
  HEADERS+=(
    -H "Content-type: application/json"
    -d "{\"name\":\"nxaddsite-token\"}"
     )

# Check if the curl command succeeded
  if ! token_resp=$(curl -sX POST "${API_URL}${TOKEN_ENDPOINT}" "${HEADERS[@]}"); then
      printf "done\n"
      printf 'failed to create client api-token'
      exit 1
  else
     CLIENT_TOKEN_ID=$(echo "${token_resp}" | jq -r '.id'); # Extract Token ID from token_resp
     CLIENT_TOKEN_VALUE=$(echo "${token_resp}" | jq -r '.token'); # Extract Token Value from token_resp
     printf "done\n"
  fi

}

_site_count(){

  local  initial_site_list site_total extra_domain total_sites

  printf 'checking plan capacity...'

# Check app_id to confirm we are working with wordpress or woo-commerce
  case ${APP_ID} in
      17 | 19)
          initial_site_list=$(echo "${SERVICE_DATA}" | jq -r '.sites[].identity');
          site_total=$(echo "${package_data}" | jq -r '.primary_accounts');
          ;;
      11)
          initial_site_list=$(echo "${SERVICE_DATA}" | jq -r '.sites[].identity, .child_sites[].identity');
          site_total=$(echo "${package_data}" | jq -r '.child_accounts');
          site_total=$((site_total + 1));
          ;;
      *)
          printf "done\n"
          printf "functionality is designed only for WordPress/Woo and Magento environments.\n"
          exit 1
          ;;
  esac

  site_count=$(echo "${initial_site_list}" | wc -l);

# Determine extra domains/sites
  if [[ "${YES_DOMAIN}" == "YES" ]]; then
      extra_domain="1"
  else
      extra_domain=$(wc -l < "${FILE}")
  fi

  total_sites=$((site_count + extra_domain)); # Calculate total sites

# Check if plan can accommodate additional sites
  if [[ "${total_sites}" -gt "${site_total}" ]]; then
     printf "done\n"
     printf "site limit reached, please upgrade to fit %s\n" "${total_sites}"
     exit 1
  fi
  printf "done %d/%d\n" "${site_count}" "${site_total}"

}

_get_site_info(){
  local plan_name service_data_endpoint package_data_endpoint
  printf 'gathering site info...'

  HEADERS=("${HEADERS[@]:0:2}"); # remove -w "%{http_code}" and -o "/dev/null"

# add new element to header array
  HEADERS+=(
    -H "Accept: application/json"
  )

  SERVICE_ID=$(awk '/service_id/ {print $2}' <<< "${SITEWORX}"); # Extract Service_id from Siteworx data
  PACKAGE_ID=$(awk '/package_id/ {print $2}' <<< "${SITEWORX}"); # Extract package_id from Siteworx data
  APP_ID=$(awk '/app_id/ {print $2}' <<< "${SITEWORX}"); # Extract app_id from Siteworx data
  SITE_ID=$(awk '/account_id/ {print $2}' <<< "${SITEWORX}"); # Extract Site_id from Siteworx data

  service_data_endpoint="${ACC_ID}/v1/service/site/${SERVICE_ID}" # Set service endpoints
  package_data_endpoint="${ACC_ID}/v1/package/site/${PACKAGE_ID}" # Set Package endpoints

  SERVICE_DATA=$(curl -s "${API_URL}${service_data_endpoint}" "${HEADERS[@]}"); # Save Service data
  package_data=$(curl -s "${API_URL}${package_data_endpoint}" "${HEADERS[@]}"); # Save Package data
  plan_name=$(echo "${SERVICE_DATA}" | jq -r '.identity');
  printf "done\n"

  printf "AccountID: %s\n" "${ACC_ID}"
  printf "Plan Name: %s\n" "${plan_name}"
  printf "ServiceID: %s\n" "${SERVICE_ID}"
}

_check_api(){

  local resp client_endpoint

  ACC_ID=$(awk '/^client_id/ {print $2}' <<< "${SITEWORX}"); # Extract account ID from siteworx data

# Set HEADERS for the API request
  HEADERS=(
    -H "Authorization: Bearer ${NWTOKEN}"
    -H "Accept: application/json"
    -w "%{http_code}"
    -o "/dev/null"
  )

# Goal: hit a less impactful endpoint to test the api token
  API_URL='https://nocworx.nexcess.net/api/v1/as-client/' # Set API URL
  client_endpoint="${ACC_ID}/v1/client" # Set client endpoint

  printf 'authenticating NWTOKEN...'

 resp=$(curl --silent "${API_URL}${client_endpoint}" "${HEADERS[@]}"); # Send curl to check api response

# Check reponse code. If not 200 get host and port info
# Else try to get the container info with api info
  if [[ "${resp}" -ne 200 ]]; then
     printf "done\n"
     printf "authentication Failed %s\n" "${resp}";
     exit 1
  else
     printf "done\n"
  fi

}

_cmdline() {

  local x;

  for x in "${ARGA[@]}"; do

    case "$x" in
     "--domain"|"-d")
        args="${args}-d "
        ;;
     "--file"|"-f")
        args="${args}-f "
        ;;
     "--help"|"-h")
        args="${args}-h "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";
}

main(){

  local cmdline user vhost dom;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":d:f:h" OPTION "${cmdline[@]}"; do

    case $OPTION in
      d)
        YES_DOMAIN="YES"
        DOMAIN=$(_normalize_domain "${OPTARG}")
        ;;
      f)
        YES_FILE="YES"
        FILE="${OPTARG}"
          if [[ ! -s "${FILE}" ]]; then
            printf "%s Does Not Exist Or Is Empty.\n" "${FILE}"
            exit 1
        fi;
        ;;
      h)
        _usage;
        exit 0;
        ;;
     "?")
        echo "-${OPTARG} is not a supported option." >&2
        ;;
      *);;
    esac
  done

# Do not allow both options to be selected
  case "${YES_DOMAIN}${YES_FILE}" in
    "YESYES")
        printf "Only one option can be selected.\n"
        exit 1
        ;;
    *)
        ;;
  esac

# Prevent this script from running on anything but cloudhosts
  if [[ ! $(hostname) =~ cloudhost ]]; then
      printf "nxaddsite is only available on Nexcess Cloud Servers\n";
      exit 1;
  fi

# Set variables for the domain information
  user="$(pwd | grep -Po "/(chroot/)?home/\K[^/]*")";
  dom="$(pwd| grep -Po "/(chroot/)?home/${user}/\K[^/]*")";
  vhost=$(find /etc/httpd/conf.d/ -type f -iname "vhost_${dom}.conf")

  SITEWORX=$(sudo -u iworx /usr/local/interworx/bin/config.pex --list --siteworx "${dom}"); # Define siteworx var

# Make sure we are in a domain directory.
  case "${vhost}" in
      "")
          printf "Vhost Not found, Make sure you are in a domain directory.\n"
          exit 1
          ;;
      *)
          ;;
  esac

# Check for NWTOKEN
  case "${NWTOKEN}" in
      "")
          read -r -p "Enter API-TOKEN: " api_token
          NWTOKEN="${api_token}"
          ;;
      *)
          ;;
  esac

  _check_api # Verify admin api token works

  _get_site_info # check plan for site details

  _site_count # Determine if sites can fit on existing plan

  _create_api_token # Create customer api token

  case "${YES_DOMAIN}" in
      "YES")
          printf "creating %s\n" "${DOMAIN}"
          _create_site "${DOMAIN}"
          ;;
      *)
          _process_domains
          ;;
  esac

  _delete_api_token # Delete customer created api token

}

main
