#! /usr/bin/env bash

# Script Arguments
  ARGA=("$@")
  DOMAIN=""
  FILE=""

_usage() {

# Print help
  cat <<- EOF

Description: Site Creation Tool For Nexcess Cloud Servers.
Requires: Nocworx api-token
Usage: nxaddsite -d

   Supported Options:

     -d|--domain   Add Domain
     -f|--file     TXT File With List Of Domains
     -h|--help     Display This Message

EOF
}

# Strip URL of any extra slashes
_normalize_domain(){

  local sed_args
  sed_args=(-e 's/https?:\/\///' -e 's/\/.*//' -e 's,\.$,,')

  echo "$1" | sed -r "${sed_args[@]}" | tr '[:upper:]' '[:lower:]'

}


create_site(){

  domain="$1"
  printf "%sCreating ${domain}\n"
  sleep 3
#  app_id=$(echo "${siteworx}" | grep 'app_id' | awk '{print $2}');
#  service_id=$(echo "${siteworx}" | grep 'service_id' | awk '{print $2}');

## Todo
# Remove the elements for headers array we don't want from existing array in check_api
# should remove -w "%{http_code}" and -o "/dev/null"
#  headers=("${headers[@]:0:2}")

# Add new headers to the existing array specifically for the POST request
#  headers+=(
#    -H "Content-type: application/json"
#    -d "{\"service_id\":\"${service_id}\", \"install_app\": \"on\", \"nickname\": \"${domain}\"}"
#  )
# Set site create endpoint
#  site_create_endpoint="${acc_id}/v1/cloud-account/"

# make the curl request to create site
#  site_create_curl=$(curl -sX POST "${api_url}/${site_create_endpoint}" "${headers[@]}")

# Kick off the site creation and grab the task uri
#  task_uri=$(echo "${site_create_curl}" | jq -r '.metadata.uri')

# remove the -d header from the array
#  headers=("${headers[@]:0:2}")

}

# Function to process domains from a file
process_domains() {

    # Read each domain from the file, normalize domain and create site
    while IFS= read -r domain; do
        normalized_domain=$(_normalize_domain "${domain}")
       create_site "$normalized_domain"
    done < "$file"
}

check_api(){

# Declare local variables
  local resp

# Define siteworx var
  siteworx=$(sudo -u iworx /usr/local/interworx/bin/config.pex --list --siteworx "${dom}");

# Extract site ID and account ID from siteworx data
  site_id=$(echo "${siteworx}" | grep 'account_id' | awk '{print $2}');
  acc_id=$(echo "${siteworx}" | grep '^client_id' | awk '{print $2}');

# set headers for the request
  headers=(
    -H "Authorization: Bearer ${NWTOKEN}"
    -H "Accept: application/json"
    -w "%{http_code}"
    -o "/dev/null"
  )

# Set API URL and container endpoint
  api_url='https://nocworx.nexcess.net/api/v1/as-client/'
  client_endpoint="${acc_id}/v1/client"

  printf "\nChecking api-key..."

# Send curl to check api response
  resp=$(curl --silent "${api_url}${client_endpoint}" "${headers[@]}");

# Check reponse code. If not 200 get host and port info
# Else try to get the container info with api info
  if [[ "${resp}" -ne 200 ]]; then
     printf "done\n"
     printf "%sAPI Token  not valid ${resp}\n";
     exit 1
  else
     printf "done\n"
  fi

}

# validate input on hostname, file path
validate_input(){

  local input pattern

  input="$1"
  pattern="$2"

  if [[ ! "${input}" =~ ${pattern} ]]; then
      printf "Error: Invalid input. Please try again\n"
      return 1
  fi
  return 0

}

_check_user_input(){

  host_pattern="^[^.|*].*$"
  path_pattern="^[^*]+$"

  case "${FILE}-${DOMAIN}" in
      YES-YES)
          printf "You Can Only Select One Option, See Help Section.\n"
          exit 1
          ;;
      *)
          ;;
  esac

  case "${DOMAIN}" in
        YES)
            while true; do
                read -r -p "Domain: " domain
                if ! validate_input "${domain}" "${host_pattern}"; then
                    continue
                fi
                domain="$(_normalize_domain "${domain}")"
                check_api
                create_site "${domain}"
                break
            done
            ;;
        *)
            ;;
    esac

    case "${FILE}" in
        YES)
            while true; do
                read -r -p "Path To Domain.txt File: " file
                if ! validate_input "${file}" "${path_pattern}"; then
                    continue
                fi
                if [ ! -s "${file}" ]; then
                    printf "%sFile ${file} Does Not Exist Or Is Empty.\n"
                    exit 1
                fi
                check_api
                process_domains
                break
            done
            ;;
        *)
            ;;
    esac

}

_cmdline() {

  local x;

  for x in "${ARGA[@]}"; do

    case "$x" in
     "--domain"|"-d")
        args="${args}-d "
        ;;
     "--file"|"-f")
        args="${args}-f "
        ;;
     "--help"|"-h")
        args="${args}-h "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

main(){

  local cmdline;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":dfh" OPTION "${cmdline[@]}"; do

    case $OPTION in
      d)
        DOMAIN="YES";
        ;;
      f)
        FILE="YES";
        ;;
      h)
        _usage;
        exit 0;
        ;;
     "?")
        echo "-${OPTARG} is not a supported option." >&2
        ;;
      *);;
    esac
  done

# Set variables for the domain information

  user="$(pwd | grep -Po "/(chroot/)?home/\K[^/]*")";
  dom="$(pwd| grep -Po "/(chroot/)?home/${user}/\K[^/]*")";
  vhost=$(find /etc/httpd/conf.d/ -type f -iname "vhost_${dom}.conf")

# Check for a vhost with the domain name
  if [[ -z ${vhost} ]]; then
    echo -e "Must be in a domain directory";
    exit 1
  fi

  if [[ -z "${NWTOKEN}" ]]; then
      read -r -p "Enter API-TOKEN: " api_token
      NWTOKEN="${api_token}"
  fi

  _check_user_input

}

main
