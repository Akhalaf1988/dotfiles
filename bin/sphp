#! /usr/bin/env bash

# Script Arguments
  ARGA=("$@")

_usage() {

# Print help
  cat <<- EOF

Description: Switchphp Tool For Nexcess Cloud Servers.
Usage: sphp -p 72

   Optional Arguments:

     -h|--help         Display This Message
     -p|--phpversion   Specify php version

EOF
}

switch_php(){


# Remove the elements we don't want
  headers=("${headers[@]:0:2}")

# Add new headers to the existing headers array
  headers+=(
    -H "Content-type: application/json"
    -d "{\"php_version\":\"${phpv}\", \"skip_compatibility_check\":\"true\"}"
  )

# Set php endpoint
  php_endpoint="${acc_id}/v1/site/${site_id}/php-version"

# make the curl request to change the php version
  php_curl=$(curl -sX POST "${api_url}/${php_endpoint}" "${headers[@]}")

# Kick off the php version change and grab the task uri

  task_uri=$(echo "${php_curl}" | jq -r '.metadata.uri')

# remove the -d header from the array
  headers=("${headers[@]:0:2}")

  while true; do
    php_status=$(curl -s "${api_url}/${acc_id}${task_uri}" "${headers[@]}" | jq -r '.status')

    if [[ "${php_status}" == "processing" ]]; then
      sleep 5
    elif [[ "${php_status}" == "success" ]]; then
      printf "done\n"
      printf "%sPHP version successfully changed to ${phpv}\n"
      break
    elif [[ "${php_status}" == "failure" ]]; then
      printf "done\n"
      printf "PHP Version Switch failed\n"
      break
    fi
  done

}

pick_php_version(){

# Define allowed values
    versions=("5.6" "7.0" "7.1" "7.2" "7.3" "7.4" "8.0" "8.1")

# This while loop displays the list of PHP versions above and asks the user to select a number corresponding to the desired PHP version. If the user selects a valid number, the corresponding PHP version is stored in the phpv variable and the loop exits. If the user selects an invalid number, an error message is displayed and the loop continues until a valid selection is made.

    while true; do
        for i in "${!versions[@]}"; do
            echo "$((i+1))) ${versions[i]}"
        done
        read -r -p "Select a Number: " option
        if ((option >= 1 && option <= ${#versions[@]})); then
            version="${versions[option-1]}"
            echo "You Selected PHP ${version}"
            phpv="${version}"
            break
        else
            echo "Invalid Selection. Please Choose a Number From The List."
        fi
    done

}

check_php_input(){

  if [[ -z "${phpv}" ]]; then
      pick_php_version
  fi

# Define allow values
  allowed_values=(
      "5.6" "56"
      "7.0" "70"
      "7.1" "71"
      "7.2" "72"
      "7.3" "73"
      "7.4" "74"
      "8.0" "80"
      "8.1" "81"
         )

# Check if value is in the allowed list and if not go to pick_php_version to choose one
  if [[ ! " ${allowed_values[*]} " =~  ${phpv} ]]; then
    printf "Not an excepted PHP version!\n"
    pick_php_version
  fi

# Replace the input value with its corresponding value in the allowed values list
  phpv="${phpv/\./}"
  for value in "${allowed_values[@]}"; do
    value="${value/\./}"
    if [[ "${phpv}" == "${value}" ]]; then
      phpv="${value:0:1}.${value:1}"
      break
    fi
  done

}

check_api_key(){

# Declare local variables
  local resp test_endpoint

# Define siteworx var
  siteworx=$(sudo -u iworx /usr/local/interworx/bin/config.pex --list --siteworx "${dom}");

# Extract site ID and account ID from siteworx data
  site_id=$(echo "${siteworx}" | grep 'account_id' | awk '{print $2}');
  acc_id=$(echo "${siteworx}" | grep '^client_id' | awk '{print $2}');

# set headers for the request
  headers=(
    -H "Authorization: Bearer ${NWTOKEN}"
    -H "Accept: application/json"
    -w "%{http_code}"
    -o "/dev/null"
  )

# Set API URL and container endpoint
  api_url='https://nocworx.nexcess.net/api/v1/as-client'
  test_endpoint="${acc_id}/v1/client/self"

# Send curl to check api response
  resp=$(curl --silent "${api_url}/${test_endpoint}" "${headers[@]}");

# Check reponse code. If not 200 get host and port info
# Else try to get the container info with api info
  if [[ "${resp}" -ne 200 ]]; then
     printf "%skey not valid ${resp}\n";
     exit 1
  fi
}

# Function to prompt the user for an API token
prompt_for_api_token () {

  read -r -p "Enter API token: " api_token
  if [[ -n "${api_token}" ]]; then
      NWTOKEN="${api_token}"
  else
      printf "Error: API token cannot be empty\n"
      prompt_for_api_token
  fi
}


# Convert long command line options into short ones for getopts

_cmdline() {

  local x;

  for x in "${ARGA[@]}"; do

    case "$x" in
     "--help"|"-h")
        args="${args}-h "
        ;;
     "--phpversion"|"-p")
        args="${args}-p "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# the main fuction to kick us off.

main(){

  local cmdline;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":hp:" OPTION "${cmdline[@]}"; do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      p)
        phpv=${OPTARG};
        ;;
     "?")
        echo "-${OPTARG} is not a supported option." >&2
        ;;
      *);;
    esac
  done

# Set variables for the domain information

  user="$(pwd | grep -Po "/(chroot/)?home/\K[^/]*")";
  dom="$(pwd| grep -Po "/(chroot/)?home/${user}/\K[^/]*")";
  vhost=$(find /etc/httpd/conf.d/ -type f -iname "vhost_${dom}.conf")

# Check for a vhost with the domain name
  if [[ -z ${vhost} ]]; then
    echo -e "Must be in a domain directory";
    exit 1
  fi

# Once we check if the api key is valid we need to check what they added for php version
  check_php_input;

# prompt for api-key if NWTOKEN is not set
  if [[ -z "${NWTOKEN}" ]]; then
      prompt_for_api_token
  fi

# Check if api key is valid by hitting a test endpoint.
  printf "\nStarting preflight checks..."
  check_api_key
  printf "done\n"

# switch php version with an api call using the key given
 printf "Changing PHP version...please wait..."
  switch_php

}
main
