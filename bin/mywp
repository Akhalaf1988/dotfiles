#!/usr/bin/env bash

# Script Arguments
  readonly ARGA=("$@")

# Alias executables to prevent PATH issues
  readonly _wp="/usr/local/bin/wp";
  readonly _phpv="/usr/bin/php74";
  readonly _sudo="/usr/bin/sudo"

#Global Variables
  _usr="$(pwd | grep -Po "/(chroot/)?home/\K[^/]*")";
  _dom="$(pwd | grep -Po "/(chroot/)?home/${_usr}/\K[^/]*")";
  _nxu="nxmigration"
  _plugin="migrate-to-liquidweb"

# Print usage
_usage() {
  cat <<- EOF
Description: Install an Admin User and Blogvault for Migrations.
Usage: mywp -flag(s)
         Supported flags:
          -a|--add-admin      Add admin
          -f|--flush-cache    Flush wp cache
          -h|--help           Display this message
          -i|--install        Install Blog Vault
          -r|--remove-admin   Remove admin
          -s|--search         Search-replace #Requires a url as an additional option
          -u|--uninstall      Uninstall Blog Vault
EOF
}

#runs sudo -u user path/to/php7 /path/to/wp cmd
_sudo_php(){

# use_paths is a boolan value. If set to true, run the top command, else the bottom
  if [[ "${use_paths}" = true ]]; then
  "${_sudo}" -u "${_usr}" "${_phpv}" "${_wp}" "$@"
  else
    "${_sudo}" -u "${_usr}" "$@"
  fi

}

_normalizedomain (){

SEDOPTS=(

   -e 's/https?:\/\///'
   -e 's/\/.*//'
   -e 's,\.$,,'
  )
echo "$1" | sed -r "${SEDOPTS[@]}" | tr '[:upper:]' '[:lower:]'

}

#args for wp commands
_end_args=(

  "--skip-plugins"
  "--skip-themes"
)

#create admin, generate pass
_admin_create(){

  local _nxe _pass

  _nxe="migrations@liquidweb.com"
  _pass="$(shuf -er -n20  {A..Z} {a..z} {0..9} | tr -d '\n')"
  _end_args+=("--user_pass=${_pass}")

  if [[ -z "${_admincheck}" ]]; then
    _end_args+=("--role=administrator")
    echo "Creating Admin user";
    _sudo_php user create "${_nxu}" "${_nxe}" "${_end_args[@]}";
    unset '_end_args[3]'
  else
    echo "${_nxu} user found, resetting password";
    _sudo_php user update "${_nxu}" "${_end_args[@]}";
  fi;

  echo "User: ${_nxu}";
  echo "Pass: ${_pass}";
  echo "";

  unset '_end_args[2]'
}

#remove migrations user
_admin_remove(){

  if [[ -n "${_admincheck}" ]]; then
    _end_args+=(--yes)
    echo "Removing Admin user";
    _sudo_php user delete "${_nxu}" "${_end_args[@]}";
    echo "";
    unset '_end_args[2]';
  else
    echo "${_nxu} user not found";
    echo "";
  fi;

}

#install bv
_bvinstall(){

  if [[ -n "${_plugin_check}" && "${_bvactive}" == "active" ]]; then
    echo "${_plugin} plugin detected";
    echo "Status: installed/active";
    echo "";
  else
    if [[ -n "${_plugin_check}" && "${_bvactive}" != "active" ]]; then
      echo "${_plugin} plugin detected";
      echo "Status: inactive..activating..";
      _sudo_php plugin activate "${_plugin}" "${_end_args[@]}";
      echo "";
    else
     _end_args+=("--activate")
     _sudo_php plugin install "${_plugin}" "${_end_args[@]}";
     unset '_end_args[2]'
     echo "";
    fi;
  fi
}

#uninstall bv
_bvuninstall(){

  if [[ -n "${_plugin_check}" && "${_bvactive}" == "active" ]]; then
    echo "Removing ${_plugin} plugin";
    _sudo_php plugin deactivate "${_plugin}" --uninstall "${_end_args[@]}";
  else
    if [[ -n "${_plugin_check}" && "${_bvactive}" != "active" ]]; then
      echo "Removing ${_plugin} plugin";
      _sudo_php plugin uninstall "${_plugin}" "${_end_args[@]}";
      echo "";
    else
      echo "No ${_plugin} plugin found";
    fi;
  fi
}

##search and replace ##check for home url and replace with arg

_search_replace(){

  local _home_url _hostname

    _hostname="$(_normalizedomain "${_url}")";
    _home_url="$(_sudo_php option get home "${_end_args[@]}" | awk -F '://' '{print $2}')"

    _sudo_php search-replace "://${_home_url}" "://${_hostname}" "${_end_args[@]}"

}

##flush cache
_flush_cache(){



if _sudo_php nxmapps cache flush --all "${_end_args[@]}" 2> /dev/null; then
  exit 0
else
  _sudo_php cache flush "${_end_args[@]}"
fi

}


# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in "${ARGA[@]}"; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--add-admin"|"-a")
        args="${args}-a "
        ;;
      "--install"|"-i")
        args="${args}-i "
        ;;
      "--uninstall"|"-u")
        args="${args}-u "
        ;;
      "--remove-admin"|"-r")
        args="${args}-r "
        ;;
      "--flush-cache"|"-f")
        args="${args}-f "
        ;;
      "--search"|"-s")
        args="${args}-s "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# Main
main () {

  declare -A commands=(

    ["flush"]="_flush_cache"
    ["install"]="_bvinstall"
    ["uninstall"]="_bvuninstall"
    ["search"]="_search_replace"
    ["add"]="_admin_create"
    ["remove"]="_admin_remove"

  )

  local cmdline;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":hiarufs:" OPTION "${cmdline[@]}"; do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      a)
         add="yes"
        ;;
      i)
         install="yes"
        ;;
      u)
         uninstall="yes"
        ;;
      r)
         remove="yes"
        ;;
      f)
         flush="yes"
        ;;
      s)
      if [[ "$OPTARG" =~ ^-.* || "$OPTARG" == "" ]]; then
        # if the argument for -s starts with a dash or is empty, it is not a valid argument
        echo "-s requires a url as an option" >&2
        exit 1
      else
        _url="$OPTARG"
        search="yes"
      fi
        ;;
      "?")
        echo "-${OPTARG} is not a supported option." >&2
        exit 1
        ;;
      *);;
    esac
  done

#check to see if they added any argument

  if [[ -z "${search}${add}${remove}${install}${uninstall}${flush}" ]]; then
    echo "Command requires an argument"
    echo ""
    _usage;
    exit 1;
  fi

#vars needed for adding and removing bv/admin

  use_paths=false
  phpv=$(_sudo_php php -r "echo PHP_VERSION;" | sed 's/\.//g' | cut -c 1-2);
  phpv_path="/usr/bin/${phpv}"
  use_paths=true

  _plugin_check=$(_sudo_php plugin list | grep  "${_plugin}");
  _bvactive=$(echo "${_plugin_check}" | awk '{print $2}');
  _admincheck="$(_sudo_php user list | grep ${_nxu})";

#Do not allow add and remove to be used at the same time.

  if [[ -n "${add}" && -n "${remove}" ]];then
    echo "Unable to Add and Remove Admin"
    exit 1
  fi

#Do not allow install and uninstall to run at the same time.

  if [[ -n "${install}" && -n "${uninstall}" ]]; then
    echo "Unable to Install and Uninstall BV"
    exit 1
  fi

##echo domain
  echo "${_dom}"

# Loop through the commands and execute the corresponding function if its flag is set to "yes"
  for cmd in "${!commands[@]}"; do
    if [[ "${!cmd}" == "yes" ]]; then
      # call the corresponding function here
      "${commands[$cmd]}"
    fi
  done

}
  if [[ ! -e "$(pwd)/wp-config.php" ]]; then
    echo "No Wordpress install in this location";
    exit 1;
  fi;

main;
