fsn()
{
    local domain;
    if [ -z "$1" ]; then
        printf "No domain given. This command requires a domain as an argument.\n";
        return 1;
    else
        if [[ "$1" == "-h" ]] \
        || [[ "$1" == "--help" ]] \
        || [[ "$1" == "help" ]] \
        || [[ "$1" == "-help" ]]; then
            printf "\n\tUsage: findsite [DOMAIN]\
            \n\t[DOMAIN] must be the target domain you wish to locate.\n\n";
            return 1;
        fi;
    fi;
    domain=$(normalizedomain "$1");
    servers=($(grep -P "\"value\":.*\"${domain}\"" /home/domains.json | grep -oP '(?<=certname":")[^"]*'));
    if [[ -z "${servers[*]}" ]]; then
        printf "Site not found: %s\n" "$domain";
        return 1;
    fi;
    serverlist="$(for x in "${servers[@]}"; do uuid2fqdn "$x"; done)";
    serverips="$(for dom in $(echo "${serverlist[@]}"); do nslookup "$dom"; done 2> /dev/null \
    | grep -E 'No\ answer|Address\: ' | awk '{print $2}' | sed "s/Can't/No-Ipaddress/g")";
    D="$(for i in {1..16}; do echo -n "-"; done)";
    printf "\nServer List\n"$D"\n";
    paste <(echo "$serverlist") <( echo "$serverips") | column -t;
    AREC="$(dig +short +time\=5 +tries\=1 "$domain")";
    Proxycheck="$(curl -sIL "$domain"/nexcess_proxy_test | grep -i x-hostname | awk '{print $2}')";
    if [[ -n "$AREC" ]]; then
        printf "\nA Record\n"$D"\n";
        Arec;
    fi;
    if [[ -n "$Proxycheck" ]]; then
        printf "\nLive Cloud Server\n"$D"\n";
        Proxycheck;
        printf "\n";
    fi
}
