#! /usr/bin/env bash
###Created by Abe k for MA to MA migrations##
# Script Arguments
readonly ARGA=("$@")
readonly _MKTEMP="/bin/mktemp"

_red='\033[0;31m'
_nc=$'\033[0m'
_blue='\033[1;34m'
_green='\033[0;32m'
_cyan=$'\033[0;36m'
_date="$(date +%m-%d-%y-"%R" | sed 's/:/-/g')"
_usr="$(pwd | grep --color=auto -Po "/(chroot/)?home/\K[^/]*")";
_usrpath="/home/${_usr}";
_dom="$(pwd| grep --color=auto -Po "/(chroot/)?home/${_usr}/\K[^/]*")";
_domchk=$(find /etc/httpd/conf.d/ -type f -iname "vhost_${_dom}.conf")
tempath="$($_MKTEMP -d)"

# Print usage
_usage() {

  cat <<- EOF
msync version 1.0
Description: Run initial and finial sync for Magento
 Usage: msync [Option]
         Supported options:
          -f|--final       Run Final Sync [db + (pub or media) folder]
          -h|--help        Display this message
          -i|--initial     Run Initial Sync
          -k|--key         Generate SSH Key
EOF

}
 #get hostname
_gethost (){
 #get hostname#
    _sdate=$(date "+%A %B %d %T %y")
    echo -e "${_blue}###### Source Info ######";
    read -r -p "${_cyan}Host: ${_nc}" _host;
     case "${_host}" in
        "*" | "*.com" | "" | "*.*" | "*.org" | "*.net" | ".*" | "*.com.*")
        echo -e "${_red}Not an accepted Hostname${_nc}";
        exit 1
        ;;
        *)
        ;;
      esac
 #get username
    read -r -p "${_cyan}SSH User: ${_nc}" _susr;
    case "${_susr}" in
        "*" | "" | "/*" | "/home/*")
        echo -e "${_red}Not an accepted Username${_nc}";
        exit 1
        ;;
        *)
        ;;
    esac
 #get port
    read -r -p "${_cyan}Port: ${_nc}" _port;
    if [[ -z ${_port} ]]; then
        _port='22';
    fi;
 #get path to main install
    read -r -p "${_cyan}Path To Sitefiles: ${_nc}" _appdocroot;
    case "${_appdocroot}" in
        "/" | "/var" | "/root" | "/home" | "/*" | "*" | "./*" | "")
        echo -e "${_red}Not an accepted path${_nc}";
        exit 1
        ;;
        *)
        ;;
    esac
#get CMS version
        read -r -p "${_cyan}Pick CMS Version (1/2): ${_nc}" _CMSVERSON;
        case $_CMSVERSON in
                1)
                _cms='1'
                _env="local.xml"
                _pub_media="media"
                ;;
                2)
                _cms='2'
                _env="env.php"
                _pub_media="pub"
                ;;
                *)
                echo -e "${_red}Not a supported version${_nc}"
                exit 1
                ;;
         esac
}


#check diskspace on local#
_dschk(){
   echo -e "${_green}Checking local Disk Space..."
   echo;
   df -h | grep -E 'File|/$|chroot'
   echo;
   printf "%8s %12s %14s %14s" "Username" "Used(%)" "Used(G)" "Total(G)";
   printf "\n%-10s" "${_usr}";
   sudo quota -g "${_usr}" 2> /dev/null | tail -1 | awk '{printf "%10.3f%%  %10.3f GB  %10.3f GB",($2/$3*100),($2/1000/1024),($3/1000/1024)}' 2> /dev/null
   echo;
   read -r -p "${_cyan}Safe to proceed (y/n): ${_nc}" _stp
    case "${_stp}" in
        "Y" | "y" | "yes" | "YES" | "Yes")
        _gethost
        ;;
        "n" | "N" | "no"  | "NO" | "No")
        echo -e "${_green}Exiting${_nc}"
        exit 0
        ;;
        *)
         echo -e "${_red}Input required, exiting${_nc}"
         exit 1
        ;;
    esac
}

#test ssh connection
_testssh (){

    if [[ -e ${tempath}/temp-MA.ed25519 ]]; then
       echo -e "${_green}Testing ssh connecting...${_nc}";
       ssh -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey -i "${tempath}"/temp-MA.ed25519 "${_susr}"@"${_host}" -p "${_port}" "echo -e '${_green}ssh connection successful${_nc}'" 2> /dev/null;
       _lastcommand="$?";
    fi
    if [ "${_lastcommand}" != 0 ]; then
        echo -e "${_red}ssh test failed\n${_nc}";
        exit 1
    fi
}

##create ssh key
_createsshkey ()
{
    echo -e "${_green}Creating SSH key...${_nc}";
    ssh-keygen -q -t rsa -b 4096 -f "${tempath}"/temp-MA.ed25519 -C 'For NX-Migrations' -N '';
    _catsshkeypub=$(cat "${tempath}"/temp-MA.ed25519.pub);
    echo "${_catsshkeypub}";
    echo ""
    echo "Key was created in this location: ${tempath}"
}

#ask if key is installed
_askkey(){

    read -r -p "${_cyan}Key installed?: ${_nc}" _key;
    case "${_key}" in
        "Y" | "y" | "yes" | "YES" | "Yes")
            _testssh
        ;;
        *)
            echo -e "${_red}Exiting Script${_nc}"
            exit 1
        ;;
    esac
}

#garther info from config file and calculate size of rsync
_gatherinfo(){
    echo -e "${_green}Gathering Info..."
    ssh -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey -i "${tempath}"/temp-MA.ed25519 "${_susr}"@"${_host}" -p "${_port}" "stat ${_appdocroot}/app/etc/${_env}" > /dev/null
    _nlastcommand="$?";
    if [ "${_nlastcommand}" != 0 ]; then
        exit 1
    fi
    ssh -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey -i "${tempath}"/temp-MA.ed25519 "${_susr}"@"${_host}" -p "${_port}" "cat ${_appdocroot}/app/etc/${_env}" | tee "${tempath}"/MA-dbinfo.txt > /dev/null
    if [[ "${_cms}" == "2" ]]; then
       _db=$(grep -E 'dbname|DB_NAME' "${tempath}"/MA-dbinfo.txt | cut -d \' -f 4 | head -n1)
       _dbu=$(grep -E 'username|DB_USER' "${tempath}"/MA-dbinfo.txt | cut -d \' -f 4 | head -n1)
       _dbpass=$(grep -E 'password|DB_PASSWORD' "${tempath}"/MA-dbinfo.txt | cut -d \' -f 4 | head -n1)
       _dbhost=$(grep -E 'host' "${tempath}"/MA-dbinfo.txt | cut -d \' -f 4 | head -n1)
    else
       _db="$(echo "cat /config/global/resources/default_setup/connection/dbname/text()" | xmllint --nocdata --shell "${tempath}"/MA-dbinfo.txt | sed '1d;$d')"
       _dbu="$(echo "cat /config/global/resources/default_setup/connection/username/text()" | xmllint --nocdata --shell "${tempath}"/MA-dbinfo.txt | sed '1d;$d')"
       _dbpass="$(echo "cat /config/global/resources/default_setup/connection/password/text()" | xmllint --nocdata --shell "${tempath}"/MA-dbinfo.txt | sed '1d;$d')"
       _dbhost="$(echo "cat /config/global/resources/default_setup/connection/host/text()" | xmllint --nocdata --shell "${tempath}"/MA-dbinfo.txt | sed '1d;$d')"
    fi
}
#all info in initial is in that temp dir, on final we need to swap what is currently in the local.xml or env.php
_gatherinfofinal(){
    if [[ "${_cms}" == "2" ]]; then
       _dbf=$(sudo grep -E 'dbname|DB_NAME' app/etc/env.php | cut -d \' -f 4 | head -n1)
       _dbuf=$(sudo grep -E 'username|DB_USER' app/etc/env.php | cut -d \' -f 4 | head -n1)
       _dbpassf=$(sudo grep -E 'password|DB_PASSWORD' app/etc/env.php | cut -d \' -f 4 | head -n1)
       _dbhostf=$(sudo grep -E 'host' app/etc/env.php | cut -d \' -f 4 | head -n1)

    else
       _dbf="$(echo "cat /config/global/resources/default_setup/connection/dbname/text()" | sudo -u ${_usr} xmllint --nocdata --shell app/etc/"${_env}" | sudo -u "${_usr}" sed '1d;$d')"
       _dbuf="$(echo "cat /config/global/resources/default_setup/connection/username/text()" | sudo -u ${_usr} xmllint --nocdata --shell app/etc/"${_env}" | sudo -u "${_usr}" sed '1d;$d')"
       _dbpassf="$(echo "cat /config/global/resources/default_setup/connection/password/text()" | sudo -u ${_usr} xmllint --nocdata --shell app/etc/"${_env}" | sudo -u "${_usr}" sed '1d;$d')"
       _dbhostf="$(echo "cat /config/global/resources/default_setup/connection/host/text()" | sudo -u ${_usr} xmllint --nocdata --shell app/etc/"${_env}" | sudo -u "${_usr}" sed '1d;$d')"
   fi
}
_calculate_rsync_initial(){
    echo "Calculating Size. Please wait..."
    _rsync_size=$(ssh -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey -i "${tempath}"/temp-MA.ed25519 "${_susr}"@"${_host}" -p "${_port}" "find ${_appdocroot} 2> /dev/null | wc -l")
}

_calculate_rsync_final(){
    echo "Calculating Size. Please wait..."
    _rsync_size_final=$(ssh -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey -i "${tempath}"/temp-MA.ed25519 "${_susr}"@"${_host}" -p "${_port}" "find ${_appdocroot}/${_pub_media} 2> /dev/null | wc -l")
}

#Dump source db and put it in a tmp folder.
_dumpdb(){

    echo -e "${_green}Dumping source db..."
    _mysqlargs="mysqldump -h ${_dbhost} --opt --skip-lock-tables --routines --max_allowed_packet=2G -u ${_dbu} -p ${_db} --password=${_dbpass}"
    _sqlfile="${_db}-${_date}-MA.sql.gz"
    _dbdump=$(ssh -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey -i "${tempath}"/temp-MA.ed25519 "${_susr}"@"${_host}" -p "${_port}" "${_mysqlargs}" | pv -W -b | gzip > "${tempath}"/"${_sqlfile}")
    echo -e "${_green}${_dbdump}${_nc}"

}


#Rsync initial
_rsyncfilesinitial(){

    echo -e "${_green}Starting Rsync..."
    sudo rsync -e "ssh -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o StrictHostKeyChecking=no -i ${tempath}/temp-MA.ed25519 -p${_port}" -vrltD --stats --human-readable "${_susr}"@"${_host}":"${_appdocroot}"/ ./ | pv -lep -s "${_rsync_size}" >/dev/null
    sudo chown -R "${_usr}". ./
    echo -e "${_nc}"

}

#Rsync final and chown
_rsyncfilesfinal(){

    echo -e "${_green}Starting Rsync..."
    sudo rsync -e "ssh -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o StrictHostKeyChecking=no -i ${tempath}/temp-MA.ed25519 -p${_port}" -vrltD --stats --human-readable "${_susr}"@"${_host}":"${_appdocroot}"/"${_pub_media}"/ ./"${_pub_media}"/ | pv -lep -s "${_rsync_size_final}" >/dev/null
    sudo chown -R "${_usr}". ./
    echo -e "${_nc}"
}


#Create db
_createdb(){

    echo -e "${_green}Creating database...${_nc}"
    if [[ -e /usr/local/interworx/lib/dict/words ]]; then
        _DIC='/usr/local/interworx/lib/dict/words';
    else
        _DIC='/usr/share/dict/words'
    fi
    _W1="$(shuf -n1000 "${_DIC}" | head -n1)";
    _W2="$(shuf -n1000 "${_DIC}" | tail -n1)";
    _W3="$(shuf -n1000 "${_DIC}" | head -n1)";
    _N="$(seq 99 | sort -R | tail -n1)";
    _pass="$(echo "${_W1}${_W2}${_W3}${_N}" | sed "s/'//g")"
    _Ramdom_num="$(shuf -i 111111-999999 -n 1)"
    _tdb="${_usr}_${_Ramdom_num}"
    sudo siteworx -u --login_domain="${_dom}" -n -c MysqlDb -a add --name "${_Ramdom_num}" --create_user 1 --user "${_Ramdom_num}" --password "${_pass}" --confirm_password "${_pass}" --host %;
}

#importdb using matt R tool
_importdb(){

    echo -e "${_green}Importing db..."
    importdb -U "${_usr}" -u "${_tdb}" -d "${_tdb}" -p "${_pass}" -f "${tempath}"/"${_sqlfile}" -y
    echo -e "${_nc}"
}

#check php version on source and target to compare at the end in pinned note
_getphp(){

    echo -e "${_green}Checking PHP Version..."
    _sourcephp=$(ssh -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o StrictHostKeyChecking=no -o PreferredAuthentications=publickey -i "${tempath}"/temp-MA.ed25519 "${_susr}"@"${_host}" -p "${_port}"  "php -v" | head -n1 | awk '{print $2}' | cut -d\. -f1-2 |  sed 's/\.//g')
    _targetphp=$(sudo grep source "${_usrpath}"/.bashrc | cut -d"/" -f4 | sed -r 's/php|u//g')
    _phpv=$(sudo grep source "${_usrpath}"/.bashrc | awk '{print $2}' | sed 's/enable/root\/usr\/bin\/php/g')

}
#search replace db, user and host in config file
_configenv(){

    echo -e "${_green}Updating ${_env}...${_nc}"
    sudo cp app/etc/"${_env}" app/etc/"${_env}"-MA-"${_date}"
    sudo grep -il -RF "${_db}" app/etc/"${_env}" | xargs -n1 sudo -u "${_usr}" sed -i -r "s/${_db}/${_tdb}/g" 2> /dev/null
    sudo grep -il -RF "${_dbu}" app/etc/"${_env}" | xargs -n1 sudo -u "${_usr}" sed -i -r "s/${_dbu}/${_tdb}/g" 2> /dev/null
    sudo grep -il -RF "${_dbpass}" app/etc/"${_env}" | xargs -n1 sudo -u "${_usr}" sed -i -r "s/${_dbpass}/${_pass}/g" 2> /dev/null
    sudo grep -il -RF "${_dbhost}" app/etc/"${_env}" | xargs -n1 sudo -u "${_usr}" sed -i -r "s/${_dbhost}/localhost/g" 2> /dev/null
}
#search replace db, user and host in config file
_configenvf(){

    echo -e "${_green}Updating ${_env}...${_nc}"
    sudo cp app/etc/"${_env}" app/etc/"${_env}"-MA-"${_date}"
    sudo grep -il -RF "${_dbf}" app/etc/"${_env}" | xargs -n1 sudo -u "${_usr}" sed -i -r "s/${_dbf}/${_tdb}/g" 2> /dev/null
    sudo grep -il -RF "${_dbuf}" app/etc/"${_env}" | xargs -n1 sudo -u "${_usr}" sed -i -r "s/${_dbuf}/${_tdb}/g" 2> /dev/null
    sudo grep -il -RF "${_dbpassf}" app/etc/"${_env}" | xargs -n1 sudo -u "${_usr}" sed -i -r "s/${_dbpassf}/${_pass}/g" 2> /dev/null
    sudo grep -il -RF "${_dbhostf}" app/etc/"${_env}" | xargs -n1 sudo -u "${_usr}" sed -i -r "s/${_dbhostf}/localhost/g" 2> /dev/null
}
#remove the temp directory created at start
_cleanup(){

   echo -e "${_green}Cleaning up...${_nc}"
   rm -r ${tempath}
}
#ending info to add in a ticket
_pinnednote(){
    echo "${_cyan}Msync Start: ${_sdate}"
    _edate=$(date "+%A %B %d %T %y")
    echo "${_cyan}Msync Finish: ${_edate}"
    echo "Source Host: ${_host}"
    echo "Source path: ${_appdocroot}"
    echo "CMS Version: ${_CMSVERSON}"
    echo "Disk space info on Target"
    df -h | grep -E 'File|/$|chroot'
    echo;
    printf "%8s %12s %14s %14s" "Username" "Used(%)" "Used(G)" "Total(G)";
    printf "\n%-10s" "${_usr}";
    sudo quota -g "${_usr}" 2> /dev/null | tail -1 | awk '{printf "%10.3f%%  %10.3f GB  %10.3f GB",($2/$3*100),($2/1000/1024),($3/1000/1024)}' 2> /dev/null
    echo ""
    echo -e "${_red}Things to check for"
    echo "-------------------"
    if [[ "${_sourcephp}" != "${_targetphp}" ]]; then
       echo "Source and Target php versions do not match!"
       echo "Source php: ${_sourcephp}"
       echo "Target php: ${_targetphp}"
    fi
    echo "Redis, Elastic-Search and Varnish
Remove the ssh pub-key"
    echo -e "${_nc}"
}
#run functions in this order
_initialsync(){

    _dschk;
    _createsshkey;
    _askkey;
    _gatherinfo;
    _calculate_rsync_initial;
    _rsyncfilesinitial;
    _dumpdb;
    _createdb;
    _importdb;
    _getphp;
    _configenv;
    _cleanup;
    _pinnednote;
}
#run functions in this order
_finalsync(){

    _dschk;
    _createsshkey;
    _askkey;
    _gatherinfo;
    _gatherinfofinal;
    _calculate_rsync_final;
    _rsyncfilesfinal;
    _dumpdb;
    _createdb;
    _importdb;
    _getphp;
    _configenvf;
    _cleanup;
    _pinnednote;

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--final"|"-f")
        args="${args}-f "
        ;;
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--initial"|"-i")
        args="${args}-i "
        ;;
      "--key"|"-k")
        args="${args}-k "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# Main
main () {

  local cmdline;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":fhik" OPTION "${cmdline[@]}"; do

    case $OPTION in
      f)
        _finalsync;
        ;;
      h)
        _usage;
        ;;
      i)
       _initialsync
        ;;
      k)
       _createsshkey
        ;;
     "?")
        echo "-${OPTARG} is not a supported option." >&2
        ;;
      *);;
    esac
  done
}
    if [[ -z ${_domchk} ]]; then
    echo -e "${_red}Must be in a domain directory${_nc}"
    exit 1
    fi

main;
